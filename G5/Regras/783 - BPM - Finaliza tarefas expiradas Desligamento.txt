@ ****************************************************************************  @
@ Desenvolvido por: Marcelo Filho                                               @
@ Data: 10/12/2024                                                              @      
@ Revisão: 1                                                                    @
@ Data Revisão:                                                                 @            
@ Autor Revisão:                                                                @
@ Descrição: Cancelar fluxos BPM de desligamento expirados                      @
@ ****************************************************************************  @                       

@---------------------------------- Funcao ------------------------------------@
Definir Funcao Autenticar();
Definir Funcao ConsultarTarefas();
Definir Funcao CancelarProcessos();
                                                                                                             
@----------------------------------- Alfa -------------------------------------@
Definir Alfa aAccessKey; 
Definir Alfa aSecret;
Definir Alfa aNomUsu;
Definir Alfa aTenantName;
Definir Alfa vHttp;
Definir Alfa aPlatformUrl;
Definir Alfa aBody;
Definir Alfa aListTasks;
Definir Alfa aBodyListTasks;
Definir Alfa aBodyListTasks2;
Definir Alfa aCancelProcess;
Definir Alfa aBodyCancelProcess;
Definir Alfa aResponse;
Definir Alfa aTokenType;
Definir Alfa aAccessToken;
Definir Alfa aBearerToken;
Definir Alfa aRetRespRole;
Definir Alfa aPapel;
Definir Alfa aGroups;
Definir Alfa aTasks;
Definir Alfa aEtapa;
Definir Alfa aProcessos;
Definir Alfa aProcId;
Definir Alfa aDate;
Definir Alfa aExpirationDate;
Definir Alfa aHora;
Definir Alfa aHoraExpiration;
Definir Alfa aMinuto;
Definir Alfa aIdProgress;
Definir Alfa aObjeto;

@---------------------------------- Numero ------------------------------------@
Definir Numero nStatusCode;
Definir Numero nPosStr;
Definir Numero diaExpRh;
Definir Numero diaExpValidSolic;
Definir Numero diaExpFolha;

@==============================================================================@
@----------------------------------Iniciando-----------------------------------@ 
@==============================================================================@

aNomUsu = "cancelaBPM"; 
aIdProgress = "45";
aAccessKey = "5f99bfbb-aefe-4b9c-8800-45e8ffdf7017";
aSecret = "7f646575-5e69-41de-ab0e-1403cb4cc0d1";
aTenantName = "carrefour-homologcom";

Autenticar();
ConsultarTarefas();

Se (aProcessos <> "") {
  CancelarProcessos();
}
     
@==============================================================================@
@-----------------------------------FUNÇÕES------------------------------------@ 
@==============================================================================@

@==============================================================================@
@-------------------------------Autenticar token-------------------------------@ 
@==============================================================================@  
Funcao Autenticar();{
 
  
  aPlatformUrl = "https://platform.senior.com.br/t/senior.com.br/bridge/1.0/anonymous/rest/platform/authentication/actions/loginWithKey";
  aBody = "{                                         \
              \"accessKey\":\"" + aAccessKey + "\",  \
              \"secret\":\"" + aSecret + "\",        \
              \"tenantName\":\"" + aTenantName + "\" \    
           }";
  
  HttpObjeto(vHttp);
  HttpDesabilitaErroResposta(vHttp);
  HttpAlteraCabecalhoRequisicao(vHttp, "Content-Type", "application/json;charset=utf-8");
  HttpPost(vHttp, aPlatformUrl, aBody, aResponse);
  HttpLeCodigoResposta(vHttp, nStatusCode);
  
  Se (nStatusCode = 200) {
    aTokenType = aResponse;
    
    PosicaoAlfa("token_type", aTokenType, nPosStr);
    TamanhoAlfa(aTokenType, nTamTot);
    CopiarAlfa(aTokenType, nPosStr+15, nTamTot);
    PosicaoAlfa("\\\",\\\"", aTokenType, nPosStr);
    CopiarAlfa(aTokenType, 0, nPosStr-1);      
    
    aAccessToken = aResponse;
    PosicaoAlfa("access_token", aAccessToken, nPosStr);   
    TamanhoAlfa(aAccessToken, nTamTot);
    CopiarAlfa(aAccessToken, nPosStr+17, nTamTot);
    PosicaoAlfa("\\\",\\\"r", aAccessToken, nPosStr); 
    CopiarAlfa(aAccessToken, 0, nPosStr - 1);
    aBearerToken = "Bearer " + aAccessToken;
  } 
}

@==============================================================================@
@------------------------------Consultar tarefas-------------------------------@ 
@==============================================================================@  
Funcao ConsultarTarefas();{
  aBodyListTasks = "{"+ 
            "\"kind\": \"MANAGER\","+ 
            "\"groupBy\": \"PROCESS\","+ 
            "\"start\": 0,"+ 
            "\"limit\": 5,"+ 
            "\"startTask\": 0,"+ 
            "\"limitTask\": 5,"+ 
            "\"orders\": [{"+ 
              "\"field\": \"START_DATE\","+
              "\"direction\": \"DESC\""+ 
            "}],"+ 
            "\"filters\": [{"+ 
              "\"type\": \"STATUS\","+ 
              "\"stringValue\": \"InProgress\""+  
              "}, {"+ 
              "\"type\": \"PROCESS\","+ 
              "\"stringValue\": \"" + aIdProgress + "\""+ 
            "}], "+
            "\"periodOfDate\": \"LAST_90_DAYS\""+ 
        "}";

  aListTasks = "https://platform.senior.com.br/t/senior.com.br/bridge/1.0/rest/platform/workflow/queries/listTasks";  
  
     
  HttpAlteraCabecalhoRequisicao(vHttp, "Authorization", aBearerToken);
  HttpAlteraCodifCaracPadrao(vHttp, "utf-8");
  HttpPost(vHttp, aListTasks, aBodyListTasks, aResponse);
  HttpLeCodigoResposta(vHttp, nStatusCode);
       
  Se(nStatusCode = 200) { 
   getJSONArrayObj(aResponse, "groups", aGroups);
   
   
   
     TamanhoAlfa(aGroups, nTamanhoTotal);
     CopiarAlfa(agroups, 2, nTamanhoTotal);
     getJSONArrayObj(aGroups, "tasks", atasks);     
     getJSONArrayLength(atasks, nCount);
     
     DesMontaData (DatSis, nDia, nMes, nAno);
       
     Para (x = 0; x < nCount; x++) {  
       x = x;
       countMenos1 = nCount-1;
       getItemJSONArrayIntegerByTag(atasks, "processInstanceId", x, nProcId);
       getItemJSONArrayStringByTag(atasks, "activity", x, aEtapa);
       getItemJSONArrayString(atasks, x, aObjeto);
       hasKeyJSON(aObjeto, "expirationDate", nAchou);
       
       
       Se(nAchou = 1)   {
       getItemJSONArrayStringByTag(atasks, "expirationDate", x, aExpirationDate);
       IntParaAlfa(nProcId, aProcId);
       
       aDate = aExpirationDate;
       aHoraExpiration = aExpirationDate;
       CopiarAlfa (aDate, 1, 10);
       CopiarAlfa (aHoraExpiration, 12, 5);
       AlfaParaData(aDate, "YYYY-MM-DD", dExpirationDate);
       
       
       aHora = aHoraExpiration;
       aMinuto = aHoraExpiration;
       
       CopiarAlfa (aHoraExpiration, 1, 2);
       AlfaParaInt(aHoraExpiration, nHora);
       
       CopiarAlfa (aMinuto, 4, 5);
       AlfaParaInt(aMinuto, nMinuto);
       
       nHora = nHora - 3; @converte para horario brasileiro@
       
       Se(nHora < 0) nHora = 23 + nHora;
       
       nHora = nHora * 60;
       nHora = nHora + nMinuto;
       
       
       
         Se ( datsis > dExpirationDate) {
             aProcessos = aProcessos + aProcId;
         }
         
          Se ( (datsis = dExpirationDate) E (horsis > nHora)) {
          aProcessos = aProcessos + aProcId;
         }       
       }
     }
  } 

}

@==============================================================================@
@-------------------------Cancelar processos expirados-------------------------@ 
@==============================================================================@  
Funcao CancelarProcessos();{  
  Definir Alfa aMotivoCanc;
  Definir Alfa aFim;
  Definir Alfa aInicio;
  Definir Alfa aRetornoCanc;
  
  aMotivoCanc = "Etapa do fluxo expirada";
  aFim = "]";
  aInicio = "[";
  aNomUsu = "usuarioponto";
  
  aCancelProcess = "https://platform.senior.com.br/t/senior.com.br/bridge/1.0/rest/platform/workflow/actions/cancelProcessInstance";  
  aBodyCancelProcess =  "{" +
                "\"ids\":" + aInicio + aProcessos + aFim + ", " +
                "\"user\":\"" + aNomUsu + "\", " +
                "\"reason\":\"" + aMotivoCanc + "\"" + 
               "}";
   
  HttpAlteraCabecalhoRequisicao(vHttp, "Authorization", aBearerToken);
  HttpAlteraCodifCaracPadrao(vHttp, "utf-8");
  HttpPost(vHttp, aCancelProcess, aBodyCancelProcess, aResponse);
  HttpLeCodigoResposta(vHttp, nStatusCode);
  
  Se (nStatusCode = 200) {         
    aRetornoCanc = aResponse;
  }   
}