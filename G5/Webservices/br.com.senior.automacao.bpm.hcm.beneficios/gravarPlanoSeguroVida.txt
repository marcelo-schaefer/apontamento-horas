x=x;
@========================================================================================@
@ [FEAT][#FABPRH-2335]: Serviço para gravar o Plano ------------------------------------ @
@========================================================================================@
@ **************************************************************************** @
@ Front End: Desevolvido por: Marcelo Filho                                    @
@ Back End: Desenvolvido por: Rafael Oliveira                                  @
@ Data: 07/02/2024                                                             @
@ Revisão: 1                                                                   @
@ Data Revisão:                                                                @
@ Autor Revisão:                                                               @
@ Descrição: Serviço para retornar o plano de seguro de vidao do colaborador   @
@ **************************************************************************** @
@==============================================================================@
@ Import ----------------------------------------------------------------------@

 
Definir interno.br.com.senior.automacao.bpm.hcm.beneficios.gravarPlanoSeguroVida ws;
@==============================================================================@
                                                                       
@==============================================================================@
@ Funcao ----------------------------------------------------------------------@
@==============================================================================@
Definir Funcao buscarPlanos ();
Definir Funcao escopoRegra();
Definir Funcao criarRevisao ();
Definir Funcao gravarPlano  ();
Definir Funcao buscarDependente();
                                                                           
@==============================================================================@
@ Variaveis -------------------------------------------------------------------@
@==============================================================================@
Definir Numero nNumEmp;nNumEmp=0;
Definir Numero nTipCol;nTipCol=0;
Definir Numero nNumCad;nNumCad=0;
Definir Numero nCodPla;nCodPla=0;
Definir Numero nCodOem;nCodOem=0;
Definir Alfa   aNomPla;aNomPla="";
Definir Alfa   aNomOem;aNomOem="";
Definir Data   dDatZer;dDatZer=0;
Definir Alfa   aRetorno;aRetorno="";
Definir Data   dDatRev; dDatRev=DatSis;
Definir Data   dMesInc; dMesInc=0;
Definir Numero nCodDep; nCodDep=0;
Definir Numero nPerCen; nPerCen=0;
Definir Alfa   aNomDep; aNomDep=""; 

@------------------------------------------------------------------------------@
@-------------------------------Colaborador                         -----------@
@------------------------------------------------------------------------------@
nNumEmp = ws.nEmpresa;
nTipCol = ws.nTipoColaborador;
nNumCad = ws.nMatricula;
nCodOem = ws.nCodigoOperadora;
nCodPla = ws.nCodigoPlano;


@------------------------------------------------------------------------------@
@>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>@
@------------------------------------------------------------------------------@
@                                                                              @
@                                                                              @
@ -----------------------------------------------------------------------------@
@   main              main              main              main           main  @
@ -----------------------------------------------------------------------------@
escopoRegra ();
@                                                                              @
@                                                                              @
@ -----------------------------------------------------------------------------@
@<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<@
@------------------------------------------------------------------------------@
@------------------------------------------------------------------------------@
@<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<@
@------------------------------------------------------------------------------@
@ FUNÇÕES ---------------------------------------------------------------------@
@------------------------------------------------------------------------------@
@>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>@
@------------------------------------------------------------------------------@
Funcao escopoRegra ();
Inicio
  buscarPlanos ();
  Se (cAchouPlano = cVerdadeiro)
  {
    criarRevisao ();
    para (nQtdLin = ws. beneficiarios.  qtdlinhas-1, nLinAtu =0; (nLinAtu <= nQtdLin );nLinAtu++)
    {
      ws. beneficiarios. linhaatual = nLinAtu;
      aNomDep = ws.beneficiarios. aNome;
      nPerCen = ws.beneficiarios. nDistribuicao;
      
      buscarDependente();
      Se (cAchouDependente = cVerdadeiro)
        gravarPlano  ();
    }        
  }                                           
Fim;   





@==============================================================================@
@------------------------------------------------------------------------------@
@ Busca Planos ----------------------------------------------------------------@
@------------------------------------------------------------------------------@
@==============================================================================@
Funcao buscarPlanos();
{
 Definir Alfa aQuery;
 Definir Alfa aCursor;
 aQuery = " SELECT ASS.MESINC "+
           " FROM R034FUN FUN  "+
           " INNER JOIN R164ASS ASS ON (FUN.NUMEMP = ASS.NUMEMP AND FUN.TIPCOL = ASS.TIPCOL AND FUN.NUMCAD = ASS.NUMCAD) "+
           " INNER JOIN R164PLA PLA ON (PLA.CODOEM = ASS.CODOEM AND PLA.CODPLA = ASS.CODPLA) "+
           " INNER JOIN R032OEM OEM ON (OEM.CODOEM = PLA.CODOEM) "+
           " WHERE FUN.NUMEMP =:nNumEmp "+
           " AND   FUN.TIPCOL =:nTipCol "+
           " AND   FUN.NUMCAD =:nNumCad "+
           " AND   ASS.CODOEM =:nCodOem "+
           " AND   ASS.CODPLA =:nCodPla "+
           " AND   ASS.MESINC <=:dDatSis "+
           " AND   ( ASS.MESEXC >=:dDatSis OR ASS.MESEXC =:dDatZer ) "; 
  SQL_Criar(aCursor);
  SQL_UsarSqlSenior2(aCursor,0);
  SQL_UsarAbrangencia(aCursor, 0);
  SQL_DefinirComando(aCursor, aQuery);    
  SQL_DefinirInteiro(aCursor,"nNumEmp",nNumEmp);
  SQL_DefinirInteiro(aCursor,"nTipCol",nTipCol);
  SQL_DefinirInteiro(aCursor,"nNumCad",nNumCad);
  SQL_DefinirInteiro(aCursor,"nCodOem",nCodOem); 
  SQL_DefinirInteiro(aCursor,"nCodPla",nCodPla);     
  SQL_DefinirData(aCursor,"dDatSis",DatSis);
  SQL_DefinirData(aCursor,"dDatZer",dDatZer);        
  SQL_AbrirCursor(aCursor);    
  Se (SQL_EOF(aCursor) = 0) 
  {
    SQL_RetornarData  (aCursor, "MesInc", dMesInc);
    cAchouPlano = cVerdadeiro;
  }
  Senao
  {
    cAchouPlano = cFalso;
  }   
  SQL_FecharCursor(aCursor);
  SQL_Destruir(aCursor);  
}


Funcao criarRevisao();
{
  definir cursor c;
  c. SQL " select usu_datrev,usu_status \
           from usu_tass000  \
           where usu_numemp=:nnumemp and \
                 usu_tipcol=:ntipcol and \
                 usu_numcad=:nnumcad and \
                 usu_codoem=:ncodoem and \
                 usu_codpla=:ncodpla and \
                 usu_mesinc=:dmesinc and \
                 usu_datrev=:ddatrev ";
  c. abrircursor();
  Se(c. achou)
  {
  
  }
  Senao
  {
    nCodUsu = RetCodUsuPorColab(nNumEmp, nTipCol, nNumCad);
    execsql "insert into usu_tass000 (usu_numemp,usu_tipcol,usu_numcad,usu_codoem,usu_codpla,usu_mesinc,usu_datrev,usu_status,usu_codusu) values \
                                     (:nNumEmp  ,  :nTipCol,  :nNumCad,  :nCodOem,  :nCodPla,  :dMesInc,  :dDatRev,  1       , :nCodUsu ) ";
  }
  c. fecharcursor();                 
}

funcao  gravarPlano  ();
{
 execsql "insert into usu_tass001 (usu_numemp,usu_tipcol,usu_numcad,usu_codoem,usu_codpla,usu_mesinc,usu_datrev,usu_coddep,usu_percen) values \
                                  (:nNumEmp  ,  :nTipCol,  :nNumCad,  :nCodOem,  :nCodPla,  :dMesInc,  :dDatRev,  :nCodDep,  :npercen) ";
}

funcao   buscarDependente();
{
 Definir Alfa aQuery;
 Definir Alfa aCursor;
 aQuery = " SELECT DEP.CODDEP "+
           " FROM R034FUN FUN  "+
           " INNER JOIN R036DEP DEP ON (FUN.NUMEMP = DEP.NUMEMP AND FUN.TIPCOL = DEP.TIPCOL AND FUN.NUMCAD = DEP.NUMCAD) "+
           " WHERE FUN.NUMEMP =:nNumEmp "+
           " AND   FUN.TIPCOL =:nTipCol "+
           " AND   FUN.NUMCAD =:nNumCad "+
           " AND   UPPER(DEP.NOMDEP) LIKE UPPER('%"+aNomDep+"%')";
  SQL_Criar(aCursor);
  SQL_UsarSqlSenior2(aCursor,0);
  SQL_UsarAbrangencia(aCursor, 0);
  SQL_DefinirComando(aCursor, aQuery);    
  SQL_DefinirInteiro(aCursor,"nNumEmp",nNumEmp);
  SQL_DefinirInteiro(aCursor,"nTipCol",nTipCol);
  SQL_DefinirInteiro(aCursor,"nNumCad",nNumCad);          
  SQL_AbrirCursor(aCursor);    
  Se (SQL_EOF(aCursor) = 0) 
  {
    cAchouDependente = cVerdadeiro;
    SQL_RetornarInteiro(aCursor,"CODDEP",nCodDep);  
  }
  Senao
    cAchouDependente = cFalso;
  SQL_FecharCursor(aCursor);
  SQL_Destruir(aCursor);    
}